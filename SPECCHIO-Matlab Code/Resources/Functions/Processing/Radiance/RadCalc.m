classdef RadCalc < SpecchioCalculationInterface
    % ==================================================
    % Public Properties
    % ==================================================
    properties (Access = public)
        levelContext; % Containing the information needed from SpecchioLevelInterface to do the calculation on a single group
    end
    
    % ==================================================
    % Public Methods
    % ==================================================
    methods (Access = private)
        % Add some small helper functions here
        function L = rad_cal(this, DN, DN_DC, IT, gain)
            DN_dc = DN - DN_DC;
            DN_dc_it = DN_dc / IT;
            L = DN_dc_it .* gain;
        end
        
        function L = rad_cal_nl(this, DN, DC, IT, gain, nl_coefs, auto_null)
           % Autonulling
           DN = DN .* auto_null;
           DC = DC .* auto_null;
           % DC Subtraction
           DN_dc = DN - DC;
           % NL
           nl_s = zeros(length(DN_dc),1);
           for i=length(nl_coefs):-1:2
              nl_s = nl_s + (nl_coefs(i) .* DN_dc .^ (i-1));
           end
           nl_s = nl_s + nl_coefs(1);
           
           DN_dc_nl = DN_dc ./ nl_s;
           % CAL
           DN_dc_nl_it = DN_dc_nl / IT;
           L = DN_dc_nl_it .* gain;
        end
    end
    
    % ==================================================
    % Public Methods
    % ==================================================
    methods (Access = public)
        function this = RadCalc(context) 
            this.levelContext = context;
        end
        
        function newVectors = execute(this)
            newVectors = java.util.ArrayList();
            if (this.levelContext.spaceContext.nl_coefs.size() ~= 0) % contains non-linearity coefficients, apply nl_corr
                
                % VEG
                newVectors.add(this.rad_cal_nl(...
                 this.levelContext.vectors.get(this.levelContext.VEG_idx),...
                 this.levelContext.vectors.get(this.levelContext.DC_VEG_idx),... 
                 this.levelContext.spaceContext.integrationTime.get(this.levelContext.VEG_idx)/1000,...
                 this.levelContext.spaceContext.calDownCoef,...
                 this.levelContext.spaceContext.nl_coefs,...
                 this.levelContext.spaceContext.auto_nulling));
                
                % WR1
                newVectors.add(this.rad_cal(...
                     this.levelContext.vectors.get(this.levelContext.WR_idx),...
                     this.levelContext.vectors.get(this.levelContext.DC_WR_idx),...
                     this.levelContext.spaceContext.integrationTime.get(this.levelContext.WR_idx)/1000,...
                     this.levelContext.spaceContext.calUpCoef,...
                     this.levelContext.spaceContext.nl_coefs,...
                     this.levelContext.spaceContext.auto_nulling));
                 
                 % WR2
                 newVectors.add(this.rad_cal(...
                     this.levelContext.vectors.get(this.levelContext.WR2_idx),...
                     this.levelContext.vectors.get(this.levelContext.DC_WR_idx),...
                     this.levelContext.spaceContext.integrationTime.get(this.levelContext.WR2_idx)/1000,...
                     this.levelContext.spaceContext.calUpCoef,...
                     this.levelContext.spaceContext.nl_coefs,...
                     this.levelContext.spaceContext.auto_nulling));
            else
                newVectors.add(this.rad_cal(...
                     this.levelContext.vectors.get(this.levelContext.VEG_idx),...
                     this.levelContext.vectors.get(this.levelContext.DC_VEG_idx),... 
                     this.levelContext.spaceContext.integrationTime.get(this.levelContext.VEG_idx)/1000,...
                     this.levelContext.spaceContext.calDownCoef)...
                     );
                 newVectors.add(this.rad_cal(...
                     this.levelContext.vectors.get(this.levelContext.WR_idx),...
                     this.levelContext.vectors.get(this.levelContext.DC_WR_idx),...
                     this.levelContext.spaceContext.integrationTime.get(this.levelContext.WR_idx)/1000,...
                     this.levelContext.spaceContext.calUpCoef)...
                     );
                 newVectors.add(this.rad_cal(...
                     this.levelContext.vectors.get(this.levelContext.WR2_idx),...
                     this.levelContext.vectors.get(this.levelContext.DC_WR_idx),...
                     this.levelContext.spaceContext.integrationTime.get(this.levelContext.WR2_idx)/1000,...
                     this.levelContext.spaceContext.calUpCoef)...
                     );
            end
        end
    end
end  